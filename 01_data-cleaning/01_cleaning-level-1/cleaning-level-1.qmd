---
title: 'Level 1 Data Cleaning: Clean the mtcars Dataset'
---

# Objective

The objective of this assignment is to practice cleaning and transforming a messy dataset using tidyverse functions. You will use skills like renaming and reordering columns, sorting rows, changing data types, mutating data, and using the stringr and forcats packages.

In this Level 1 Cleaning assignment, you will work with a simple dataset and focus on basic data cleaning tasks. Most tasks are outlined in the assignment script. You may want to review the [Data Cleaning Walkthrough]() before you begin.

You may additionally or alternatively complete the [Level 2 Data Cleaning assignment](). In Level 2, you will work with a more complex dataset and perform additional cleaning tasks with less direct instruction. The Level 2 assignment has more opportunities to demonstrating meeting course standards than this Level 1 assignment and is recommended for those who are already comfortable with the tasks in this assignment.

# Instructions

1. If you have not already done so, pull the latest changes from the `d2mr-assignments` repository to ensure you have the most up-to-date version of the assignment files. Confirm you are working in your fork of the repository.
2. Open `cleaning-level-1.qmd` in RStudio and follow the instructions in the Setup section below to load and inspect the (clean) `goal.mtcars` dataset. 
    - **Important:** The provided code makes a small modification to the original `mtcars` dataset to create a `goal.mtcars` dataset. You will use this goal dataset as a reference to clean the `messy-mtcars.csv` dataset, not the true original.
3. Follow the tasks described in the assignment script to clean the dataset and return it to its original state.
4. At several points in this document you will come across questions or non-coding exercises. Answer these questions in the text of this .qmd document, immediately below the question.
5. *Optional:* Continue to follow the instructions in the assignment script to clean the dataset above and beyond matching the original. 


### Tasks

**Reminder:** Your goal is to match `goal.mtcars` (created below), *not* the default `mtcars`.[^1]

[^1]: Why? The `mtcars` dataset includes models names as *row names* rather than as a variable/column. For the purposes of this cleaning exercise, it's more useful to treat model names as a variable.

1. **Renaming Columns:** Rename columns to match the original `mtcars` dataset column names.
2. **Reordering Columns:** Ensure the columns are in the correct order.
3. **Sorting Rows:** Sort the rows by `mpg` (miles per gallon) and then by `cyl` (number of cylinders).
4. **Changing Data Types:** Ensure `gear` and `carb` are factors and other columns are numeric.
5. **Mutating Data:** Create a new column `hp_per_cyl` calculated as `hp` (horsepower) divided by `cyl`.
6. **String Manipulation:** Use `stringr` to clean any unwanted spaces or characters in the `model` column.
7. **Handling Factors:** Use `forcats` to ensure the levels of `gear` are ordered as `3`, `4`, `5`.

# Setup

## Loading libraries and set seed

```{r}
#| label: setup
library(tidyverse)
set.seed(1234)
```


## Read in and inspect messy data

Read in and inspect the messy dataset `messy-mtcars.csv`.

```{r}

#| label: read-messy-data

### LEAVE THIS CHUNK AS-IS ###

# You *might* need to edit the filepath, but don't change anything else!

# Read in messy-mtcars.csv
messy.mtcars <- read_csv(
  ########################################
  "messy-mtcars.csv", ## <-- THIS IS THE ONLY THING IN THIS CHUNK YOU CAN CHANGE IF NECESSARY
  ########################################
  trim_ws = FALSE, name_repair = "minimal", col_types = cols(.default = col_character()))

# Inspect the data
head(messy.mtcars)

```

## Inspect the original mtcars dataset

```{r}
#| label: inspect-original-data

### LEAVE THIS CHUNK AS-IS ###

# Load the original mtcars dataset
data(mtcars)

# Create the "goal.mtcars" dataset
# Convert row names to a column called "model" (see note above about row names)
goal.mtcars <- mtcars %>%
  rownames_to_column(var = "model")

# Inspect the goal.mtcars dataset
head(goal.mtcars)

# Optionally inspect the original mtcars dataset to see what the row names vs column issue looks like
# head(mtcars)

```

```{r}
#| label: compare-datasets

# Compare messy and original datasets through all.equal()
all.equal(messy.mtcars, goal.mtcars)
```


QUESTIONS:

1. What are the differences between the messy dataset and the original mtcars dataset?

<!-- answer below -->
Differences include the following: 
1) Columns are out of order
2) Column names do not match (Whitespace and wording/abbreviations)
3) Row names do no not match (e.g., capitalization)
3) Numbers are not rounded the same (decimal placement) 
4) Amount of columns are not the same (There are 14 in messy and 12 in goal)
5) Data types are incorrect (In messy are character while goal are numeric (excpet for 'model' column))

<!-- COMPLETED MOVE ON -->

2. What are the main issues you need to address in cleaning? 

<!-- answer below -->

1) Reorder columns
2) Rename columns 
3) Rename rows
3) Round numbers to same decimal place for each column
4) Remove unecessary columns  
5) Correct data types

<!-- COMPLETED MOVE ON -->

# Clean the Dataset

## Creat "clean" dataset

```{r}

#| label: make-cleaning-dataset

# Create a dataset to work with during the cleaning process called "clean.mtcars"
clean.mtcars <- messy.mtcars

```

## Clean columns/variables

```{r}
#| label: inspect-column-names 

#Check the names of messy.mtcars
colnames(messy.mtcars)

#Check the names of goal.mtcars
colnames(goal.mtcars)
```


```{r}

#| label: rename-columns

# Rename columns to match the original mtcars dataset
clean.mtcars <- messy.mtcars %>%
# Format is rename(new_name = old_name)
  rename('model' =  ' Car Model', 'mpg' = 'mpg (Miles/Gallon)', 'cyl' = 'cylinders', 'disp' = 'dsip', 'hp' = 'horsepower', 'drat' = 'drat', 'wt' = 'wt', 'qsec' = 'qsec', 'vs' = 'vs', 'am' = 'am', 'gear' = 'gearbox', 'carb' = 'carburetors')

# Check column rename
colnames(clean.mtcars)
```

```{r}

#| label: reorder-columns

# Reorder columns to match the original mtcars dataset
clean.mtcars <- clean.mtcars %>%
  relocate('model', 'mpg', 'cyl', 'disp', 'hp', 'drat', 'wt', 'qsec', 'vs', 'am', 'gear', 'carb')

#Compare columns with header not all.equal because still have two additional columns so it will not help
head(clean.mtcars)
head(goal.mtcars)

```

```{r}

#| label: correct-data-types

# Correct variable data types
clean.mtcars.datatype <- clean.mtcars %>%
  #Convert all columns except 'model' to numeric
  mutate(
   mpg = as.numeric(mpg),
   cyl = as.numeric(cyl),
   disp = as.numeric(disp),
   hp = as.numeric(hp),
   drat = as.numeric(drat),
   wt = as.numeric(wt),
   qsec = as.numeric(qsec),
   vs = as.numeric(vs),
   am = as.numeric(am),
   gear = as.numeric(gear),
   carb = as.numeric(carb)
  )

theclean.mtcars <- clean.mtcars.datatype
finalclean.matcars <- theclean.mtcars
#Check varaible types
head(finalclean.matcars)

```

## Checkpoint 1

```{r}

#| label: checkpoint-1

# Inspect the current state of the dataset

# Use all.equal() to check if clean.mtcars matches goal.mtcars
all.equal(finalclean.matcars, goal.mtcars)
```

Questions:

3. The current state of the dataset does not yet match the `goal.mtcars` dataset. Explain the issues that `all.equal()` flags.  Are there groups of issues that can be addressed together?

<!-- answer below -->

1) Columns disp, drat, and qsec have a mean relative difference, which can be fixed collectiv ely through rounding to the same decimal placement as the goal.mtcars
2) Data impute is needed for columns cyl and hp. In theclean.mtcars there are 2 and 3 NA's for columns cyl and hp, respectively. Therefore, will need to reference goal.mtcars to know what values to place. 
3) The two data sets are different (e.g., data frames vs tibble) 
4) Amount of columns are not the same (There are 14 in clean and 12 in goal) 
5) Column Model needs to be corrected 

<!-- COMPLETED MOVE ON -->

3. Install (if necessary) and load the `daff` package. In the code chunk below, use the `diff_data()` function to identify the differences between `clean.mtcars` and `goal.mtcars`. 

```{r}
#| label: diff-data

# Install and/or load the daff package if needed
# install.package("daff")
# library(daff)
install.packages('daff')
library(daff)


# Use render_diff() and diff_data() to identify differences between clean.mtcars and goal.mtcars

all.equal(finalclean.matcars, goal.mtcars)
render_diff(diff_data(finalclean.matcars, goal.mtcars))

#Fix the class difference (tibble to data frame)
finalclean.matcars <- as.data.frame(finalclean.matcars)
goal.mtcars <- as.data.frame(goal.mtcars)
head(finalclean.matcars)
```
How is this method of identifying data discrepancies different from `all.equal()`? Which do you find more helpful at this point?

<!-- answer below -->

1) I find both to be helpful at this point. I can use the all.equal() to relaize that cyl and hp need to have imputed values; however, they do not tell me where. This then allows for me to go render_diff() and diff_data() to find which row in theclean.mtcars has the NA and what the value should be since it is being compared to goal.mtcars

2) This may be controversial but I find again both to be helpful. I can use the all.equal() to find that three columns have mean relative difference (e.g., disp, drat, and qsec). Now I have an idea of what I am looking for when I go to render_diff() and diff_data(). This helps to show me what my current decimal placement is for theclean.mtcars and what it should be to achieve the same values as goal.mtcars. 

3) Again I prefer both as all.equal() helps for me to know that there is a length mismatch while render_diff() and diff_data() helps to show where. 

4) Lastly, the all.equal() helps to note that the model column does not match, but the render_diff() and diff_data() helps to show me what it should be. 

<!-- COMPLETED MOVE ON -->

## Clean data values

Identifying specific value problems and cleaning them might take a little creativity at times! Use the troubleshooting/debugging workflows we've discussed to get as far as you can.

```{r}
#| label: remove-unwanted-spaces

# Remove unwanted whitespace in any columns required
theclean.mtcars.spaces <- finalclean.matcars %>%
  mutate(
    across(everything(), str_squish
           ) %>%
      mutate(
    model = as.character(model),
    mpg = as.numeric(mpg),
    cyl = as.numeric(cyl),
    disp = as.numeric(disp),
    hp = as.numeric(hp),
    drat = as.numeric(drat),
    wt = as.numeric(wt),
    qsec = as.numeric(qsec),
    vs = as.numeric(vs),
    am = as.numeric(am),
    gear = as.numeric(gear),
    carb = as.numeric(carb)
  ))
head(theclean.mtcars.spaces)
```

```{r}

#| label: impute-missing-values

# Impute missing values for cyl and hp

#cyl impute
clean.mtcars.impute.cyl.hp <- theclean.mtcars.spaces %>%
  ungroup() %>%
  mutate(
    cyl = case_when(
      is.na(cyl) & row_number() == 15 ~ 8,
      is.na(cyl) & row_number() == 30 ~ 6,
      TRUE ~ cyl
      )
    ) %>%
  mutate(
    hp = case_when(
      is.na(hp) & row_number() == 9 ~ 95,
      is.na(hp) & row_number() == 18 ~ 66,
      is.na(hp) & row_number() == 27 ~ 91,
      TRUE ~ hp
    )
  )

#Add to final 
clean.mtcars.impute.cyl.hp
all.equal(clean.mtcars.impute.cyl.hp, goal.mtcars)
head(clean.mtcars.impute.cyl.hp)
```

```{r}

#| label: round-numeric-values

# Round numeric values

clean.mtcars.round <- clean.mtcars.impute.cyl.hp %>%
  mutate(
    disp = round(disp, 1),
    drat = round(drat, 2),
    qsec = round(qsec, 2)
  )

#Add to final
clean.mtcars.round
all_equal(clean.mtcars.round, goal.mtcars)
render_diff(diff_data(clean.mtcars.round, goal.mtcars))
head(clean.mtcars.round)
```

```{r}

#| label: fix-typos

# Fix typos in model names
## Hint: This can be completed with a 6-line mutate() statement
 # Mutating old name to new name
clean.mtcars.typos <- clean.mtcars.round %>%
  mutate(
    model = str_replace_all(model, "Hornet SportAbout", "Hornet Sportabout"),
    model = str_replace_all(model, "CAdillac Fleetwood", "Cadillac Fleetwood"),
    model = str_replace_all(model, "ToyotA Corolla", "Toyota Corolla"),
    model = str_replace_all(model, "T0yota Corona", "Toyota Corona"),
    model = str_replace_all(model, "PontiAc Firebird", "Pontiac Firebird"),
    model = str_replace_all(model, "L0tus Europa", "Lotus Europa"),
    model = str_replace_all(model, "FerrAri Dino", "Ferrari Dino"))
#Check for typos
clean.mtcars.typos
all_equal(clean.mtcars.typos, goal.mtcars)

```

```{r}

#| label: remove-extra-column

# Remove the extra column
clean.mtcars.rmvecol <- clean.mtcars.typos %>%
  select(-13, -14) %>%
  select (, 1:12)
  
#Check extra column
clean.mtcars.rmvecol

#Add to final
clean.mtcars.rmvecol
head(clean.mtcars.rmvecol)
```


## Checkpoint 2

```{r}
#| label: checkpoint-2

# Inspect the dataset and compare to goal.mtcars

# all.equal()
all.equal(clean.mtcars.rmvecol, goal.mtcars)
# daff
library(daff)
diff_data(clean.mtcars.rmvecol, goal.mtcars)
render_diff(diff_data(clean.mtcars.rmvecol, goal.mtcars))
head(clean.mtcars.rmvecol)
```

Questions:

5. Is your dataset identical to `goal.mtcars`? If not, what are the remaining issues? If there were any issues you could not resolve in code, describe a proposed solution in plain English.

<!-- answer below -->

Yes, they are identical.

# Optional Cleaning Tasks

You can call it a day here, or continue with the optional cleaning tasks below. These tasks are a chance to challenge yourself and practice your skills further. They are also additional opportunities to demonstrate mastery of course standards! 


## Additional guided cleaning

*Optional:* Complete any number of the following tasks to further clean the dataset. Each task should be in its own code chunk with an appropriate label and clearly commented code:

1. Create a new factor column `mpg_category` that categorizes `mpg` into "low", "medium", and "high" based on the distribution of `mpg` values.
```{r}

```

2. Create a new factor column `wt_category` that categorizes `wt` into "light", "medium", and "heavy" based on the distribution of `wt` values, then reverse the order of the levels.

```{r}

```

3. Create a new column `mpg_per_cyl` that calculates `mpg` divided by `cyl`.

```{r}

```

4. Filter the data to only include cars with automatic transmissions. (Hint: `?mtcars` will show you useful info.)

```{r}

```

5. Identify which variable would be better suited as a logical variable, then convert it to logical.

```{r}

```

6. Sort the dataset by `mpg_category` then reverse alphabetically by `model` (so that models with the same `mpg_category` are sorted Z to A).

```{r}

```

7. Write the cleaned dataset as a csv file called `clean-mtcars.csv`, then read the csv back in maintaining the correct data types.








## Unguided cleaning and transformation

*Optional:* If you have the time and interest, continue transforming this dataset as you please. Create new columns based on the existing ones, reformat strings, try your hand at a regex replacement, summarize by groups (factor levels), visualize a simple relationship, or anything else you can think of. You can do this in addition to or instead of the suggested additional cleaning tasks above.


# Submission & Assessment

To submit:

1. Modify the `assessment.md` in this mini-project's directory:
    1. Check off all objectives you believe you have demonstrated
    2. Indicate which objectives you are meeting for the first time (if any)
    3. Complete any relevant open-ended items
2. Push your changes to your centralized assignment repository on GitHub. 
3. Confirm that Dr. Dowling nad your section TA are added as collaborators to your repository.
4. Submit your work in your next open mini-project assignment by including the following information in the text box:
    1. The title of the assignment: "Assignment: Clean the mtcars Dataset (Level 1)"
    2. A link to the **directory** for this assignment in your centralized assignment repo


